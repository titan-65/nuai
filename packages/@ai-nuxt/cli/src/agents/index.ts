import fs from 'fs-extra'
import path from 'path'
import { getAgentTemplate } from '../templates'

/**
 * Agent interface
 */
export interface Agent {
  name: string
  type: string
  description: string
  capabilities: string[]
  filePath?: string
}

/**
 * Agent creation options
 */
export interface CreateAgentOptions {
  name: string
  type: string
  description: string
  capabilities: string[]
}

/**
 * Get agents directory
 */
function getAgentsDir(): string {
  return path.join(process.cwd(), 'agents')
}

/**
 * Ensure agents directory exists
 */
async function ensureAgentsDir(): Promise<void> {
  const agentsDir = getAgentsDir()
  await fs.ensureDir(agentsDir)
}

/**
 * Create a new agent
 */
export async function createAgent(options: CreateAgentOptions): Promise<void> {
  await ensureAgentsDir()
  
  const agentsDir = getAgentsDir()
  const agentPath = path.join(agentsDir, `${options.name}.ts`)
  
  // Check if agent already exists
  if (await fs.pathExists(agentPath)) {
    throw new Error(`Agent ${options.name} already exists`)
  }
  
  // Generate agent code
  const agentCode = getAgentTemplate(options.type as any, options.name)
  
  // Write agent file
  await fs.writeFile(agentPath, agentCode)
  
  // Update agents index file
  await updateAgentsIndex()
}

/**
 * List all agents
 */
export async function listAgents(): Promise<Agent[]> {
  const agentsDir = getAgentsDir()
  
  if (!(await fs.pathExists(agentsDir))) {
    return []
  }
  
  const files = await fs.readdir(agentsDir)
  const agentFiles = files.filter(file => file.endsWith('.ts') && file !== 'index.ts')
  
  const agents: Agent[] = []
  
  for (const file of agentFiles) {
    const filePath = path.join(agentsDir, file)
    const content = await fs.readFile(filePath, 'utf-8')
    
    // Parse agent metadata from file content
    const agent = parseAgentMetadata(content, file)
    if (agent) {
      agent.filePath = filePath
      agents.push(agent)
    }
  }
  
  return agents
}

/**
 * Run an agent
 */
export async function runAgent(name: string, input: string): Promise<string> {
  const agents = await listAgents()
  const agent = agents.find(a => a.name === name)
  
  if (!agent) {
    throw new Error(`Agent ${name} not found`)
  }
  
  // In a real implementation, this would dynamically import and execute the agent
  // For now, return a mock response
  return `Agent ${name} executed with input: ${input}`
}

/**
 * Delete an agent
 */
export async function deleteAgent(name: string): Promise<void> {
  const agentsDir = getAgentsDir()
  const agentPath = path.join(agentsDir, `${name}.ts`)
  
  if (!(await fs.pathExists(agentPath))) {
    throw new Error(`Agent ${name} not found`)
  }
  
  await fs.remove(agentPath)
  await updateAgentsIndex()
}

/**
 * Update agents index file
 */
async function updateAgentsIndex(): Promise<void> {
  const agentsDir = getAgentsDir()
  const indexPath = path.join(agentsDir, 'index.ts')
  
  const agents = await listAgents()
  
  let indexContent = '/**\n * Agents index file\n * Auto-generated by AI Nuxt CLI\n */\n\n'
  
  // Add imports
  agents.forEach(agent => {
    indexContent += `export { ${agent.name} } from './${agent.name}'\n`
  })
  
  // Add agents registry
  indexContent += '\n/**\n * Available agents\n */\n'
  indexContent += 'export const agents = {\n'
  agents.forEach(agent => {
    indexContent += `  ${agent.name},\n`
  })
  indexContent += '}\n'
  
  // Add agent metadata
  indexContent += '\n/**\n * Agent metadata\n */\n'
  indexContent += 'export const agentMetadata = [\n'
  agents.forEach(agent => {
    indexContent += `  {\n`
    indexContent += `    name: '${agent.name}',\n`
    indexContent += `    type: '${agent.type}',\n`
    indexContent += `    description: '${agent.description}',\n`
    indexContent += `    capabilities: ${JSON.stringify(agent.capabilities)}\n`
    indexContent += `  },\n`
  })
  indexContent += ']\n'
  
  await fs.writeFile(indexPath, indexContent)
}

/**
 * Parse agent metadata from file content
 */
function parseAgentMetadata(content: string, filename: string): Agent | null {
  try {
    // Extract agent name from export
    const nameMatch = content.match(/export const (\w+) = defineAgent/)
    const name = nameMatch ? nameMatch[1] : path.basename(filename, '.ts')
    
    // Extract description
    const descMatch = content.match(/description: ['"`]([^'"`]+)['"`]/)
    const description = descMatch ? descMatch[1] : 'No description'
    
    // Extract capabilities
    const capabilitiesMatch = content.match(/capabilities: \[([\s\S]*?)\]/)
    let capabilities: string[] = []
    if (capabilitiesMatch) {
      const capabilitiesStr = capabilitiesMatch[1]
      capabilities = capabilitiesStr
        .split(',')
        .map(cap => cap.trim().replace(/['"`]/g, ''))
        .filter(cap => cap.length > 0)
    }
    
    // Determine type based on content or filename
    let type = 'custom'
    if (content.includes('assistant') || filename.includes('Assistant')) {
      type = 'assistant'
    } else if (content.includes('researcher') || filename.includes('Research')) {
      type = 'researcher'
    } else if (content.includes('coder') || filename.includes('Coder')) {
      type = 'coder'
    }
    
    return {
      name,
      type,
      description,
      capabilities
    }
  } catch (error) {
    console.error(`Error parsing agent metadata from ${filename}:`, error)
    return null
  }
}